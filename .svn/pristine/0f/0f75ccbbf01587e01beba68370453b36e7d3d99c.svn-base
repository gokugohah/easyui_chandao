<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">


	 
	<!-- 数据库和事务配置 -->
    <!-- 加载配置文件 -->
     <context:property-placeholder location="classpath:jdbc.properties" /> 

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass">
 			<value>${jdbc.driverClassName}</value>
<!--  			<value>com.mysql.jdbc.Driver</value>  -->
		</property>
		<property name="jdbcUrl">
  			<value>${jdbc.url}</value> 
<!--  			<value>jdbc:mysql://localhost:3306/08</value>  -->
		</property>
		<property name="user">
  			<value>${jdbc.username}</value>  
<!--  			<value>root</value>  -->
		</property>
		<property name="password">
  			<value>${jdbc.password}</value> 
<!--  			<value>root</value>  -->
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>8</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>200</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>20</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>0</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>0</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>
	
	
	<!-- mybaties -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池-->
		<property name="dataSource" ref="dataSource" />
		<!-- 所有配置的mapper文件 -->
		<property name="mapperLocations" value="classpath*:com/baidu/*/mapper/*.mapper.xml" />
		<!-- 起别名 -->
		<property name="typeAliasesPackage" value="com.baidu" />
		
	</bean>
	 <!-- 配置bean   自动扫描所有mapper   自动给Mapper接口产生代理类对象    并且给代理对象注入SqlSessionFactory-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"> 
			<value>com.baidu.*.dao</value>
		</property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 配置Jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>	

	 <!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		 <tx:attributes>  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="create*" propagation="REQUIRED" />  
            <!-- <tx:method name="*" propagation="true" />-->  
        </tx:attributes>
	</tx:advice>

	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod" expression=" execution(* com.baidu.*.service..*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	
	
	
	<!-- ======================== 调度工厂 ======================== -->
    <bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
            	<!-- 调度触发器 -->
                <ref bean="CronTriggerBean"/>
            </list>
        </property>
    </bean>  

	<!-- ======================== 调度触发器 ======================== -->
    <bean id="CronTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
    	<!-- 任务调度类 -->
        <property name="jobDetail" ref="SpringQtzJobMethod"></property>
        <!-- 任务执行时间，当我们配置日期和周时，我们应该注意只能指定二者中的一个，另一个必须为？ -->
        <!-- <property name="cronExpression" value="0 0 19 ? * 1"></property> -->
        <property name="cronExpression" value="0 03 15 * * ?"></property>
    </bean>
    
    <!-- 任务调度类 -->
     <!-- 使用MethodInvokingJobDetailFactoryBean， 通过targetMethod指定调用方法-->  
    <bean id="SpringQtzJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 任务执行类 -->
        <property name="targetObject">
            <ref bean="QuartzJob"/>
        </property>
        <property name="targetMethod">  
            <value>run</value><!-- 要执行的方法名称 -->
        </property>
    </bean>
    
    
    
    <!-- 定义目标bean和bean中的方法 -->
    <!-- 任务执行类 --> 
    <bean id="QuartzJob" class="com.baidu.product.controller.QuartzJob"></bean>



</beans>